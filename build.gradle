/*
 * Build file for StArcade
 */

plugins { 
	// https://docs.gradle.org/current/userguide/java_plugin.html
	id 'java'
	        
	// https://docs.gradle.org/current/userguide/application_plugin.html	        
	//id 'application' 
	
	// https://docs.gradle.org/current/userguide/eclipse_plugin.html
    id 'eclipse'     
    
    // https://docs.gradle.org/current/userguide/idea_plugin.html
    id 'idea'        
    
    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'	
    
    // https://docs.gradle.org/current/userguide/pmd_plugin.html
    id 'pmd'     
    
    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    id 'checkstyle' 
}

ext { // define variables for version number of different components
	jersey_version = '2.29.1' 
	grizzly_version = '2.4.4'
	junit_version = '5.6.0'
	junit_platform_version = '1.6.0'
	jackson_version = '2.10.2'
}

java { // https://docs.gradle.org/current/userguide/java_plugin.html#sec:java-extension
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	withJavadocJar()
	withSourcesJar()	
}

repositories { // https://docs.gradle.org/current/userguide/declaring_repositories.html
    jcenter()
    mavenCentral()
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}
 
dependencies { // https://docs.gradle.org/current/userguide/declaring_dependencies.html
    implementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"        
    implementation "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
    implementation "org.glassfish.jersey.core:jersey-server:${jersey_version}" 
    implementation "org.glassfish.jersey.inject:jersey-hk2:${jersey_version}"
    implementation "org.glassfish.jersey.media:jersey-media-json-jackson:${jersey_version}"
	implementation "org.glassfish.grizzly:grizzly-http-server:${grizzly_version}"
	implementation "org.glassfish.jersey.containers:jersey-container-grizzly2-http:${jersey_version}"
	implementation "org.apache.logging.log4j:log4j-api:2.13.0"
    implementation "org.apache.logging.log4j:log4j-core:2.13.0"

	//https://junit.org/junit5/docs/current/user-guide/index.html#dependency-metadata
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"    
	testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"	
	testImplementation "org.junit.jupiter:junit-jupiter-params:${junit_version}"
	testImplementation "org.junit.platform:junit-platform-runner:${junit_platform_version}"
	testImplementation "org.junit.platform:junit-platform-suite-api:${junit_platform_version}"
	testImplementation "org.junit.platform:junit-platform-engine:${junit_platform_version}"
    
    testImplementation "org.mockito:mockito-core:2.+" 
      
}

test { // https://docs.gradle.org/5.2.1/userguide/java_testing.html#using_junit5 
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:configuring_the_jacoco_plugin
jacoco { 
	toolVersion = "0.8.5"
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:jacoco_report_configuration
jacocoTestReport {
	reports {
	  csv.enabled true
	  html.destination file("$buildDir/jacocoHtml")
	}
}

checkstyle {
	toolVersion "8.29"
	configFile file("$configDir/google_checks_modified.xml")
}

pmd {
    ignoreFailures = true
}

jar {
  manifest {
    attributes('Main-Class': 'stacs.arcade.Main')
  }
}

// ensure that Javadoc does not fail our build
tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
}

/**
 * Running this task is going to be somewhat faster than running from a fully assembled .jar file.
 * TODO: running from within Gradle does not work because Gradle provides an empty standard input,
 * which makes the server shut down immediately
 */
task runGrizzly(type: JavaExec) { // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html
  classpath = sourceSets.main.runtimeClasspath
  main = 'stacs.arcade.Main'
}
